// <auto-generated />
using System;
using Enchiridion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Enchiridion.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250302005831_User_Mappings")]
    partial class User_Mappings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Enchiridion.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_authors");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_authors_user_id");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("Enchiridion.Models.AuthorRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_author_requests");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_author_requests_user_id");

                    b.ToTable("author_requests", (string)null);
                });

            modelBuilder.Entity("Enchiridion.Models.Habit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("HabitCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("habit_category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_habits");

                    b.HasIndex("HabitCategoryId")
                        .HasDatabaseName("ix_habits_habit_category_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_habits_user_id");

                    b.ToTable("habits", (string)null);
                });

            modelBuilder.Entity("Enchiridion.Models.HabitCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_habit_categories");

                    b.ToTable("habit_categories", (string)null);
                });

            modelBuilder.Entity("Enchiridion.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("QuoteText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quote_text");

                    b.HasKey("Id")
                        .HasName("pk_quotes");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_quotes_author_id");

                    b.ToTable("quotes", (string)null);
                });

            modelBuilder.Entity("Enchiridion.Models.Routine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.PrimitiveCollection<int[]>("Days")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("days");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_routines");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_routines_user_id");

                    b.ToTable("routines", (string)null);
                });

            modelBuilder.Entity("Enchiridion.Models.RoutineStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RoutineId")
                        .HasColumnType("integer")
                        .HasColumnName("routine_id");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer")
                        .HasColumnName("step_order");

                    b.HasKey("Id")
                        .HasName("pk_routine_steps");

                    b.HasIndex("RoutineId")
                        .HasDatabaseName("ix_routine_steps_routine_id");

                    b.ToTable("routine_steps", (string)null);
                });

            modelBuilder.Entity("Enchiridion.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("RoutineStepId")
                        .HasColumnType("integer")
                        .HasColumnName("routine_step_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_todos");

                    b.HasIndex("RoutineStepId")
                        .HasDatabaseName("ix_todos_routine_step_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_todos_user_id");

                    b.ToTable("todos", (string)null);
                });

            modelBuilder.Entity("Enchiridion.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auth_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AuthId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_auth_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("step_habit", b =>
                {
                    b.Property<int>("habit_id")
                        .HasColumnType("integer")
                        .HasColumnName("habit_id");

                    b.Property<int>("step_id")
                        .HasColumnType("integer")
                        .HasColumnName("step_id");

                    b.HasKey("habit_id", "step_id")
                        .HasName("pk_step_habit");

                    b.HasIndex("habit_id")
                        .HasDatabaseName("ix_step_habit_habit_id");

                    b.HasIndex("step_id")
                        .HasDatabaseName("ix_step_habit_step_id");

                    b.ToTable("step_habit", (string)null);
                });

            modelBuilder.Entity("Enchiridion.Models.Author", b =>
                {
                    b.HasOne("Enchiridion.Models.User", null)
                        .WithMany("SubscribedAuthors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_authors_users_user_id");
                });

            modelBuilder.Entity("Enchiridion.Models.AuthorRequest", b =>
                {
                    b.HasOne("Enchiridion.Models.User", null)
                        .WithMany("AuthorRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_author_requests_users_user_id");
                });

            modelBuilder.Entity("Enchiridion.Models.Habit", b =>
                {
                    b.HasOne("Enchiridion.Models.HabitCategory", "HabitCategory")
                        .WithMany()
                        .HasForeignKey("HabitCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habits_habit_categories_habit_category_id");

                    b.HasOne("Enchiridion.Models.User", null)
                        .WithMany("Habits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_habits_users_user_id");

                    b.Navigation("HabitCategory");
                });

            modelBuilder.Entity("Enchiridion.Models.Quote", b =>
                {
                    b.HasOne("Enchiridion.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quotes_authors_author_id");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Enchiridion.Models.Routine", b =>
                {
                    b.HasOne("Enchiridion.Models.User", null)
                        .WithMany("Routines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routines_users_user_id");
                });

            modelBuilder.Entity("Enchiridion.Models.RoutineStep", b =>
                {
                    b.HasOne("Enchiridion.Models.Routine", null)
                        .WithMany("Steps")
                        .HasForeignKey("RoutineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_routine_steps_routines_routine_id");
                });

            modelBuilder.Entity("Enchiridion.Models.Todo", b =>
                {
                    b.HasOne("Enchiridion.Models.RoutineStep", "RoutineStep")
                        .WithMany("Todos")
                        .HasForeignKey("RoutineStepId")
                        .HasConstraintName("fk_todos_routine_steps_routine_step_id");

                    b.HasOne("Enchiridion.Models.User", null)
                        .WithMany("Todos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_todos_users_user_id");

                    b.Navigation("RoutineStep");
                });

            modelBuilder.Entity("step_habit", b =>
                {
                    b.HasOne("Enchiridion.Models.Habit", null)
                        .WithMany()
                        .HasForeignKey("habit_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_step_habit_to_habit");

                    b.HasOne("Enchiridion.Models.RoutineStep", null)
                        .WithMany()
                        .HasForeignKey("step_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_step_habit_to_step");
                });

            modelBuilder.Entity("Enchiridion.Models.Routine", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Enchiridion.Models.RoutineStep", b =>
                {
                    b.Navigation("Todos");
                });

            modelBuilder.Entity("Enchiridion.Models.User", b =>
                {
                    b.Navigation("AuthorRequests");

                    b.Navigation("Habits");

                    b.Navigation("Routines");

                    b.Navigation("SubscribedAuthors");

                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
